{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/BlogGridList.js","webpack:///./components/FrontPageHeader.js","webpack:///./components/PostGrid.js","webpack:///./components/busy/Body.js","webpack:///./components/busy/ChainValidation.js","webpack:///./components/busy/PostFeedEmbed.js","webpack:///./components/busy/SanitizeConfig.js","webpack:///./components/busy/constants.js","webpack:///./components/busy/formatter.js","webpack:///./components/busy/improve.js","webpack:///./components/busy/regexHelpers.js","webpack:///./components/busy/steemitHtmlReady.js","webpack:///./components/busy/steemitLinks.js","webpack:///./helpers/dateFromJsonString.js","webpack:///./helpers/getImage.js","webpack:///./helpers/isBlacklisted.js","webpack:///./pages/index.js","webpack:///external \"@babel/polyfill\"","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@material-ui/core/Avatar\"","webpack:///external \"@material-ui/core/Button\"","webpack:///external \"@material-ui/core/Card\"","webpack:///external \"@material-ui/core/CardActionArea\"","webpack:///external \"@material-ui/core/CardActions\"","webpack:///external \"@material-ui/core/CardContent\"","webpack:///external \"@material-ui/core/CardHeader\"","webpack:///external \"@material-ui/core/CardMedia\"","webpack:///external \"@material-ui/core/CircularProgress\"","webpack:///external \"@material-ui/core/Grid\"","webpack:///external \"@material-ui/core/GridList\"","webpack:///external \"@material-ui/core/GridListTile\"","webpack:///external \"@material-ui/core/GridListTileBar\"","webpack:///external \"@material-ui/core/IconButton\"","webpack:///external \"@material-ui/core/Typography\"","webpack:///external \"@material-ui/icons/FlightTakeoff\"","webpack:///external \"@material-ui/icons/Star\"","webpack:///external \"classnames\"","webpack:///external \"dsteem\"","webpack:///external \"embedjs\"","webpack:///external \"lodash\"","webpack:///external \"lodash/slice\"","webpack:///external \"next/link\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-dom/server\"","webpack:///external \"react-helmet\"","webpack:///external \"reading-time\"","webpack:///external \"remarkable\"","webpack:///external \"sanitize-html\"","webpack:///external \"styled-jsx/style\"","webpack:///external \"url-parse\"","webpack:///external \"xmldom\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import React, { Component, Fragment } from \"react\";\nimport \"@babel/polyfill\";\nimport PropTypes from \"prop-types\";\nimport getImage from \"../helpers/getImage\";\nimport Link from \"next/link\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FlightIcon from \"@material-ui/icons/FlightTakeoff\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass BlogGridList extends Component {\n  state = {\n    stream: this.props.stream\n  };\n  render() {\n    return (\n      <Fragment>\n        <Typography\n          variant=\"display1\"\n          align=\"center\"\n          gutterBottom={true}\n          className=\"pb-2\"\n        >\n          From Our Blog\n        </Typography>\n        <div\n          style={{\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyContent: \"space-around\",\n            overflow: \"hidden\"\n          }}\n        >\n          <GridList\n            style={{ flexWrap: \"nowrap\", transform: \"translateZ(0)\" }}\n            cols={2.5}\n          >\n            {this.props.stream.map(post => {\n              const json = JSON.parse(post.json_metadata);\n              if (\n                post.author === \"travelfeed\" &&\n                json.tags.indexOf(\"travelfeeddaily\") > -1 === true\n              ) {\n                const image = getImage(post.json_metadata, post.body, \"700x0\");\n                return (\n                  <Link\n                    as={`/@${post.author}/${post.permlink}`}\n                    href={`/post?author=${post.author}&permlink=${\n                      post.permlink\n                    }`}\n                    passHref\n                  >\n                    <a>\n                      <GridListTile\n                        key={post.permlink}\n                        style={{\n                          height: \"250px\"\n                        }}\n                      >\n                        <div\n                          className=\"second-slide\"\n                          style={{\n                            backgroundImage: `url(${image})`,\n                            backgroundRepeat: \"no-repeat\",\n                            backgroundPosition: \"center top\",\n                            backgroundSize: \"cover\",\n                            width: \"600px\",\n                            height: \"100%\"\n                          }}\n                        />\n                        <GridListTileBar\n                          title={post.title}\n                          style={{\n                            background:\n                              \"linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\n                          }}\n                          actionIcon={\n                            <IconButton>\n                              <FlightIcon className=\"text-light\" />\n                            </IconButton>\n                          }\n                        />\n                      </GridListTile>\n                    </a>\n                  </Link>\n                );\n              }\n            })}\n\n            <Link\n              as={`/blog`}\n              href={`/blog?author=travelfeed`}\n              prefetch\n              passHref\n            >\n              <a>\n                <GridListTile\n                  style={{\n                    height: \"250px\"\n                  }}\n                  className=\"cpointer\"\n                >\n                  <a>\n                    <div\n                      className=\"second-slide\"\n                      style={{\n                        backgroundImage:\n                          \"url( https://steemitimages.com/900x0/https://cdn.steemitimages.com/DQmUT2EJjDC1CHPmbFaGyyCgmxnqdKQZDJNMwZEgskjZgPU/continuetoblog.jpg)\",\n                        backgroundRepeat: \"no-repeat\",\n                        backgroundPosition: \"center center\",\n                        backgroundSize: \"cover\",\n                        width: \"600px\",\n                        height: \"100%\"\n                      }}\n                    />\n                  </a>\n                  <GridListTileBar\n                    title=\"Read more on our Blog\"\n                    style={{\n                      background:\n                        \"linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\n                    }}\n                    actionIcon={\n                      <IconButton>\n                        <FlightIcon className=\"text-light\" />\n                      </IconButton>\n                    }\n                  />\n                </GridListTile>\n              </a>\n            </Link>\n          </GridList>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nBlogGridList.propTypes = {\n  stream: PropTypes.array\n};\n\nexport default BlogGridList;\n","/* eslint-disable react/no-unescaped-entities */\nimport React, { Fragment, Component } from \"react\";\nimport \"@babel/polyfill\";\nimport Button from \"@material-ui/core/Button\";\nimport Helmet from \"react-helmet\";\nimport Link from \"next/link\";\n\nclass FrontPageHeader extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Helmet>\n          <script\n            src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n            integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n            crossOrigin=\"anonymous\"\n          />\n          <script\n            src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\"\n            integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\"\n            crossOrigin=\"anonymous\"\n          />\n        </Helmet>\n        <div\n          id=\"myCarousel\"\n          className=\"carousel slide carousel-fade\"\n          data-ride=\"carousel\"\n        >\n          <ol className=\"carousel-indicators\">\n            <li\n              data-target=\"#myCarousel\"\n              data-slide-to=\"0\"\n              className=\"active\"\n            />\n            <li data-target=\"#myCarousel\" data-slide-to=\"1\" />\n            <li data-target=\"#myCarousel\" data-slide-to=\"2\" />\n          </ol>\n          <div className=\"carousel-inner\">\n            <div className=\"carousel-item active\">\n              <div\n                className=\"first-slide\"\n                style={{\n                  backgroundImage: \"url(/img/header-1.jpg)\",\n                  backgroundRepeat: \"no-repeat\",\n                  backgroundPosition: \"center center\",\n                  backgroundSize: \"cover\",\n                  width: \"100%\",\n                  height: \"100%\"\n                }}\n              />\n              <div className=\"container\">\n                <div className=\"carousel-caption text-light text-dark\">\n                  <h1>TravelFeed: The Travel Community.</h1>\n                  <div className=\"row justify-content-center\">\n                    <div className=\"col-md-6\">\n                      <p>\n                        On TravelFeed, you can discover great travel content by\n                        hundreds of independrend travellers like yourself!\n                      </p>\n                    </div>\n                  </div>\n                  <p>\n                    <Link href=\"#discover\">\n                      <Button color=\"secondary\" variant=\"contained\">\n                        Discover Now\n                      </Button>\n                    </Link>\n                  </p>\n                </div>\n              </div>\n            </div>\n            <div className=\"carousel-item\">\n              <div\n                className=\"second-slide\"\n                style={{\n                  backgroundImage: \"url(/img/header-2.jpg)\",\n                  backgroundRepeat: \"no-repeat\",\n                  backgroundPosition: \"center center\",\n                  backgroundSize: \"cover\",\n                  width: \"100%\",\n                  height: \"100%\"\n                }}\n              />\n              <div className=\"container\">\n                <div className=\"carousel-caption text-dark\">\n                  <h1>Share your Story.</h1>\n                  <div className=\"row justify-content-center\">\n                    <div className=\"col-md-6\">\n                      <p>\n                        We all have stories to share. This is why we offer you a\n                        free Blog hosted on the uncensorable Steem Blockchain\n                        and accessible ad-free through your own subdomain.\n                      </p>\n                    </div>\n                  </div>\n                  <p>\n                    <Link href=\"\">\n                      <Button color=\"primary\" variant=\"outlined\">\n                        Learn more\n                      </Button>\n                    </Link>\n                  </p>\n                </div>\n              </div>\n            </div>\n            <div className=\"carousel-item\">\n              <div\n                className=\"third-slide\"\n                style={{\n                  backgroundImage: \"url(/img/header-3.jpg)\",\n                  backgroundRepeat: \"no-repeat\",\n                  backgroundPosition: \"center right\",\n                  backgroundSize: \"cover\",\n                  width: \"100%\",\n                  height: \"100%\"\n                }}\n              />\n              <div className=\"container\">\n                <div className=\"carousel-caption text-right text-dark\">\n                  <h1>Get Rewarded.</h1>\n                  <div className=\"row\">\n                    <div className=\"col-md-6\" />\n                    <div className=\"col-md-6 text-right\">\n                      <p>\n                        When readers like your post, they will hit the 'take\n                        off' button and assign miles to it. After seven days,\n                        you can claim the reward for your post in\n                        cryptocurrency.\n                      </p>\n                    </div>\n                  </div>\n                  <p>\n                    <Button color=\"inherit\" variant=\"outlined\">\n                      Join the Community\n                    </Button>\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <a\n            className=\"carousel-control-prev\"\n            href=\"#myCarousel\"\n            role=\"button\"\n            data-slide=\"prev\"\n          >\n            <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\" />\n            <span className=\"sr-only\">Previous</span>\n          </a>\n          <a\n            className=\"carousel-control-next\"\n            href=\"#myCarousel\"\n            role=\"button\"\n            data-slide=\"next\"\n          >\n            <span className=\"carousel-control-next-icon\" aria-hidden=\"true\" />\n            <span className=\"sr-only\">Next</span>\n          </a>\n        </div>\n        <style jsx>{`\n          /* GLOBAL STYLES\n-------------------------------------------------- */\n          /* Padding below the footer and lighter body text */\n\n          body {\n            padding-top: 3rem;\n            padding-bottom: 3rem;\n            color: #5a5a5a;\n          }\n\n          /* CUSTOMIZE THE CAROUSEL\n-------------------------------------------------- */\n\n          /* Carousel base class */\n          .carousel {\n            margin-bottom: 4rem;\n          }\n          /* Since positioning the image, we need to help out the caption */\n          .carousel-caption {\n            bottom: 3rem;\n            z-index: 10;\n          }\n\n          /* Declare heights because of positioning of img element */\n          .carousel-item {\n            height: 32rem;\n            background-color: #777;\n          }\n          .carousel-item > img {\n            position: absolute;\n            top: 0;\n            left: 0;\n            min-width: 100%;\n            height: 32rem;\n          }\n\n          /* MARKETING CONTENT\n-------------------------------------------------- */\n\n          /* Center align the text within the three columns below the carousel */\n          .marketing .col-lg-4 {\n            margin-bottom: 1.5rem;\n            text-align: center;\n          }\n          .marketing h2 {\n            font-weight: 400;\n          }\n          .marketing .col-lg-4 p {\n            margin-right: 0.75rem;\n            margin-left: 0.75rem;\n          }\n\n          /* Featurettes\n------------------------- */\n\n          .featurette-divider {\n            margin: 5rem 0; /* Space out the Bootstrap <hr> more */\n          }\n\n          /* Thin out the marketing headings */\n          .featurette-heading {\n            font-weight: 300;\n            line-height: 1;\n            letter-spacing: -0.05rem;\n          }\n\n          /* RESPONSIVE CSS\n-------------------------------------------------- */\n\n          @media (min-width: 40em) {\n            /* Bump up size of carousel content */\n            .carousel-caption p {\n              margin-bottom: 1.25rem;\n              font-size: 1.25rem;\n              line-height: 1.4;\n            }\n\n            .featurette-heading {\n              font-size: 50px;\n            }\n          }\n\n          @media (min-width: 62em) {\n            .featurette-heading {\n              margin-top: 7rem;\n            }\n          }\n        `}</style>\n      </Fragment>\n    );\n  }\n}\n\nexport default FrontPageHeader;\n","import React, { Fragment, Component } from \"react\";\nimport \"@babel/polyfill\";\nimport PropTypes from \"prop-types\";\nimport sanitize from \"sanitize-html\";\nimport { getHtml } from \"../components/busy/Body\";\nimport { Client } from \"dsteem\";\nimport getImage from \"../helpers/getImage\";\nimport isBlacklisted from \"../helpers/isBlacklisted\";\nimport Link from \"next/link\";\nimport readingTime from \"reading-time\";\nimport dateFromJsonString from \"../helpers/dateFromJsonString\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport StarIcon from \"@material-ui/icons/Star\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FlightIcon from \"@material-ui/icons/FlightTakeoff\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\n\nconst client = new Client(\"https://api.steemit.com\");\n\nclass PostGrid extends Component {\n  state = {\n    type: this.props.type,\n    filter: this.props.filter,\n    sortby: this.props.sortby,\n    error: false,\n    hasMore: true,\n    isLoading: false,\n    position: this.props.position,\n    lastauthor: \"\",\n    lastpermlink: \"\",\n    selector: \"\",\n    stream: this.props.stream\n  };\n  streamBlog = async () => {\n    this.setState({\n      isLoading: true\n    });\n    let lastpermlink = this.state.lastpermlink;\n    let lastauthor = this.state.lastauthor;\n    var filtertype = \"blog\";\n    if (this.state.type == \"tag\") {\n      filtertype = this.state.sortby;\n    }\n    if (lastpermlink == \"\") {\n      var tagargs = { tag: this.state.filter, limit: 25 };\n      const tagstream = await client.database.getDiscussions(\n        filtertype,\n        tagargs\n      );\n      try {\n        lastpermlink =\n          tagstream.length > 0 ? tagstream[tagstream.length - 1].permlink : \"\";\n        lastauthor =\n          tagstream.length > 0 ? tagstream[tagstream.length - 1].author : \"\";\n      } catch (err) {\n        this.setState({\n          error: err.message,\n          isLoading: false\n        });\n      }\n    }\n    var args = {\n      tag: this.state.filter,\n      limit: 100,\n      start_author: lastauthor,\n      start_permlink: lastpermlink\n    };\n    if (this.state.type == \"curationfeed\") {\n      args = {\n        tag: this.state.filter,\n        limit: 25,\n        start_author: lastauthor,\n        start_permlink: lastpermlink\n      };\n    } else if (this.state.type == \"tag\") {\n      args = {\n        tag: this.state.filter,\n        limit: 100,\n        start_author: lastauthor,\n        start_permlink: lastpermlink\n      };\n    }\n    if (this.state.position == 0) {\n      args = {\n        tag: this.state.filter,\n        limit: 24\n      };\n      this.setState({ position: 1 });\n    }\n    const stream = await client.database.getDiscussions(filtertype, args);\n    lastpermlink = stream.length > 0 ? stream[stream.length - 1].permlink : \"\";\n    lastauthor = stream.length > 0 ? stream[stream.length - 1].author : \"\";\n    delete stream[stream.length - 1];\n    try {\n      if (stream.length == 0) {\n        this.setState({\n          hasMore: false,\n          isLoading: false\n        });\n      }\n      const loadposts = this.state.stream.concat(stream);\n      this.setState({\n        lastpermlink: lastpermlink,\n        lastauthor: lastauthor,\n        stream: loadposts,\n        isLoading: false,\n        hasMore: true\n      });\n    } catch (err) {\n      this.setState({\n        error: err.message,\n        isLoading: false\n      });\n    }\n  };\n  async setSort(sortby) {\n    if (sortby == \"featured\") {\n      await this.setState({\n        sortby: sortby,\n        position: 0,\n        stream: [],\n        type: \"curationfeed\"\n      });\n    } else {\n      await this.setState({\n        sortby: sortby,\n        position: 0,\n        stream: [],\n        type: \"tag\"\n      });\n    }\n    window.history.pushState(\"\", \"\", `/${sortby}/${this.state.filter}/`);\n    this.streamBlog();\n  }\n  componentDidMount() {\n    if (this.state.type == \"tag\") {\n      this.setState({ selector: \"tag\" });\n    }\n    if (this.state.type == \"curationfeed\") {\n      this.setState({ selector: \"curationfeed\" });\n    }\n    this.streamBlog();\n    window.onscroll = () => {\n      const {\n        streamBlog,\n        state: { error, isLoading, hasMore }\n      } = this;\n      if (error || isLoading || !hasMore) return;\n      if (\n        window.innerHeight + document.documentElement.scrollTop ===\n        document.documentElement.scrollHeight\n      ) {\n        streamBlog();\n      }\n    };\n  }\n  render() {\n    let count = 0;\n    const { error, hasMore, isLoading } = this.state;\n    let processed = [];\n    var selector = \"\";\n    var featured_variant =\n      this.state.sortby != \"featured\" ? \"outlined\" : \"contained\";\n    var created_variant =\n      this.state.sortby != \"created\" ? \"outlined\" : \"contained\";\n    var hot_variant = this.state.sortby != \"hot\" ? \"outlined\" : \"contained\";\n    var trending_variant =\n      this.state.sortby != \"trending\" ? \"outlined\" : \"contained\";\n    if (this.state.selector == \"curationfeed\") {\n      let heading = \"Feed\";\n      if (this.state.sortby == \"featured\") {\n        heading = \"Editor's Choice\";\n      }\n      if (this.state.sortby == \"created\") {\n        heading = \"New Posts\";\n      }\n      if (this.state.sortby == \"hot\") {\n        heading = \"Taking Off\";\n      }\n      if (this.state.sortby == \"trending\") {\n        heading = \"Above the Clouds\";\n      }\n      selector = (\n        <Fragment>\n          <Typography\n            variant=\"display1\"\n            align=\"center\"\n            gutterBottom={true}\n            className=\"pt-5\"\n          >\n            {heading}\n          </Typography>\n          <Grid item lg={12} md={12} sm={12} xs={12}>\n            <div className=\"pb-4 text-center\">\n              <Button\n                variant={featured_variant}\n                color=\"primary\"\n                className=\"m-2\"\n                onClick={() => this.setSort(\"featured\")}\n              >\n                Featured\n              </Button>\n              <Button\n                variant={created_variant}\n                color=\"primary\"\n                className=\"m-2\"\n                onClick={() => this.setSort(\"created\")}\n              >\n                New\n              </Button>\n              <Button\n                variant={hot_variant}\n                color=\"primary\"\n                className=\"m-2\"\n                onClick={() => this.setSort(\"hot\")}\n              >\n                Hot\n              </Button>\n              <Button\n                variant={trending_variant}\n                color=\"primary\"\n                className=\"m-2\"\n                onClick={() => this.setSort(\"trending\")}\n              >\n                Trending\n              </Button>\n            </div>\n          </Grid>\n        </Fragment>\n      );\n    } else if (this.state.selector == \"tag\") {\n      selector = (\n        <Grid item lg={12} md={12} sm={12} xs={12}>\n          <div className=\"pb-4 text-center\">\n            <Link as={`/created/${this.state.filter}`}>\n              <Button\n                variant={created_variant}\n                color=\"primary\"\n                className=\"m-2\"\n                onClick={() => this.setSort(\"created\")}\n              >\n                Created\n              </Button>\n            </Link>\n            <Link as={`/hot/${this.state.filter}`}>\n              <Button\n                variant={hot_variant}\n                color=\"primary\"\n                className=\"m-2\"\n                onClick={() => this.setSort(\"hot\")}\n              >\n                Hot\n              </Button>\n            </Link>\n            <Link as={`/trending/${this.state.filter}`}>\n              <Button\n                variant={trending_variant}\n                color=\"primary\"\n                className=\"m-2\"\n                onClick={() => this.setSort(\"trending\")}\n              >\n                Trending\n              </Button>\n            </Link>\n          </div>\n        </Grid>\n      );\n    }\n    return (\n      <Fragment>\n        <Grid\n          container\n          spacing={0}\n          alignItems=\"center\"\n          justify=\"center\"\n          className=\"p-3\"\n        >\n          {selector}\n          {this.state.stream.map(post => {\n            const json = JSON.parse(post.json_metadata);\n            let htmlBody = getHtml(post.body, {}, \"text\");\n            let sanitized = sanitize(htmlBody, { allowedTags: [] });\n            const readtime = readingTime(sanitized);\n            // Filter out:\n            // - Filter out duplicates. This does not work for some reason..\n            // - Limit initial fetch to 7 posts\n            // - Exclude resteems\n            if (\n              ((processed.indexOf(post.permlink) > -1 === false && count < 8) ||\n                this.state.stream.length > 24) &&\n              (this.state.type == \"tag\" ||\n                (this.state.type == \"curationfeed\" &&\n                  post.author != this.state.filter) ||\n                (this.state.type == \"blog\" &&\n                  post.author == this.state.filter)) &&\n              isBlacklisted(post.author, post.permlink) === false &&\n              readtime.words > 250 &&\n              json.tags.indexOf(\"travelfeed\") > -1 === true &&\n              json.tags.indexOf(\"nsfw\") > -1 === false\n            ) {\n              const replaceex = /[^\\sa-zA-Z0-9(?)(')(`)(,)(\\-)(’)(#)(!)(´)(:)(()())(\\])([)]+/g;\n              let excerpt = sanitized\n                .replace(/(?:https?|ftp):\\/\\/[\\n\\S]+/g, \"\")\n                .replace(replaceex, \"\")\n                .substring(0, 250);\n              let title = post.title.replace(replaceex, \"\");\n              title =\n                title.length > 85 ? title.substring(0, 81) + \"[...]\" : title;\n              const posttag =\n                typeof json.tags != \"undefined\" && json.tags.length > 0\n                  ? json.tags[1]\n                  : \"\";\n              const json_date = '{ \"date\": \"' + post.created + 'Z\" }';\n              const date_object = new Date(\n                JSON.parse(json_date, dateFromJsonString).date\n              );\n              const created = date_object.toDateString();\n              const image = getImage(post.json_metadata, post.body, \"400x0\");\n              //todo: try fetching first image from post if no image is defined in json_metadata\n              let totalmiles = 0;\n              var iscurated = <Fragment />;\n              //Proposal for voting system: Each user can give between 0.1 and 10 \"miles\", each 0.1 mile equals a 1% upvote.\n              for (let vote = 0; vote < post.active_votes.length; vote++) {\n                totalmiles += Math.round(\n                  post.active_votes[vote].percent / 1000\n                );\n                if (\n                  post.active_votes[vote].voter == \"travelfeed\" &&\n                  post.active_votes[vote].percent > 8000\n                ) {\n                  iscurated = (\n                    <IconButton>\n                      <StarIcon />\n                    </IconButton>\n                  );\n                }\n              }\n              ++count;\n              processed.push(post.permlink);\n              return (\n                <Grid item lg={3} md={4} sm={6} xs={12}>\n                  <Card key={post.permlink} className=\"m-2\">\n                    <CardHeader\n                      avatar={\n                        <Link\n                          as={`/@${post.author}`}\n                          href={`/blog?author=${post.author}`}\n                          passHref\n                        >\n                          <a>\n                            <Avatar\n                              style={{ cursor: \"pointer\" }}\n                              src={`https://steemitimages.com/u/${\n                                post.author\n                              }/avatar/small`}\n                            />\n                          </a>\n                        </Link>\n                      }\n                      action={iscurated}\n                      title={\n                        <Link\n                          as={`/@${post.author}`}\n                          href={`/blog?author=${post.author}`}\n                          passHref\n                        >\n                          <a className=\"text-dark\">{post.author}</a>\n                        </Link>\n                      }\n                      subheader={created + \" | \" + readtime.text}\n                    />\n                    <CardActionArea>\n                      <CardMedia\n                        style={{ height: 140 }}\n                        className=\"pt-2 text-right\"\n                        image={image}\n                      />\n                      <Link\n                        as={`/@${post.author}/${post.permlink}`}\n                        href={`/post?author=${post.author}&permlink=${\n                          post.permlink\n                        }`}\n                        passHref\n                      >\n                        <a>\n                          {\" \"}\n                          <CardContent>\n                            <Typography\n                              gutterBottom\n                              variant=\"h5\"\n                              component=\"h2\"\n                            >\n                              {title}\n                            </Typography>\n                            <Typography component=\"p\">\n                              {excerpt} [...]\n                            </Typography>\n                          </CardContent>\n                        </a>\n                      </Link>\n                    </CardActionArea>\n                    <CardActions>\n                      <div className=\"container\">\n                        <div className=\"row\">\n                          <div className=\"col-6 p-0\">\n                            <IconButton aria-label=\"Upvote\">\n                              <FlightIcon className=\"mr\" />\n                            </IconButton>\n                            <span className=\"text-muted font-weight-bold\">\n                              {totalmiles}\n                            </span>\n                          </div>\n                          <div className=\"col-6 pt-2 p-0 text-right\">\n                            <Link\n                              as={`/created/${posttag}`}\n                              href={`/tag?sortby=created&tag=${posttag}`}\n                              passHref\n                            >\n                              <a>\n                                {\" \"}\n                                <span\n                                  className=\"badge badge-secondary p-1 pl-2 pr-2 rounded cpointer small\"\n                                  style={{ fontSize: \"0.6rem\" }}\n                                >\n                                  {posttag.toUpperCase()}\n                                </span>\n                              </a>\n                            </Link>\n                          </div>\n                        </div>\n                      </div>\n                    </CardActions>\n                  </Card>\n                </Grid>\n              );\n            }\n          })}\n          {!error && <Typography>{error}</Typography>}\n          {isLoading && (\n            <div className=\"p-5\">\n              <Grid item xs={1}>\n                <div className=\"p-5\">\n                  <CircularProgress />\n                </div>\n              </Grid>\n            </div>\n          )}\n          {!hasMore && <Typography>That is all :)</Typography>}\n        </Grid>\n      </Fragment>\n    );\n  }\n}\nPostGrid.defaultProps = {\n  stream: [{}],\n  sortby: \"featured\",\n  position: 25\n};\n\nPostGrid.propTypes = {\n  type: PropTypes.string.isRequired,\n  filter: PropTypes.string.isRequired,\n  sortby: PropTypes.string,\n  stream: PropTypes.array,\n  position: PropTypes.number\n};\n\nexport default PostGrid;\n","import React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nimport classNames from \"classnames\";\nimport sanitizeHtml from \"sanitize-html\";\nimport Remarkable from \"remarkable\";\nimport embedjs from \"embedjs\";\nimport { jsonParse } from \"./formatter\";\nimport sanitizeConfig from \"./SanitizeConfig\";\nimport { imageRegex, dtubeImageRegex, rewriteRegex } from \"./regexHelpers\";\nimport htmlReady from \"./steemitHtmlReady\";\nimport improve from \"./improve\";\nimport PostFeedEmbed from \"./PostFeedEmbed\";\n\nexport const remarkable = new Remarkable({\n  html: true, // Remarkable renders first then sanitize runs...\n  breaks: true,\n  linkify: false, // linkify is done locally\n  typographer: false, // https://github.com/jonschlinkert/remarkable/issues/142#issuecomment-221546793\n  quotes: \"“”‘’\"\n});\n\nconst getEmbed = link => {\n  const embed = embedjs.get(link, {\n    width: \"100%\",\n    height: 400,\n    autoplay: false\n  });\n\n  if (_.isUndefined(embed)) {\n    return {\n      provider_name: \"\",\n      thumbnail: \"\",\n      embed: link\n    };\n  }\n\n  return embed;\n};\n\n// Should return text(html) if returnType is text\n// Should return Object(React Compatible) if returnType is Object\nexport function getHtml(\n  body,\n  jsonMetadata = {},\n  returnType = \"Object\",\n  options = {}\n) {\n  const parsedJsonMetadata = jsonParse(jsonMetadata) || {};\n  parsedJsonMetadata.image = parsedJsonMetadata.image || [];\n\n  let parsedBody = body.replace(\n    /<!--([\\s\\S]+?)(-->|$)/g,\n    \"(html comment removed: $1)\"\n  );\n\n  parsedBody.replace(imageRegex, img => {\n    if (\n      _.filter(parsedJsonMetadata.image, i => i.indexOf(img) !== -1).length ===\n      0\n    ) {\n      parsedJsonMetadata.image.push(img);\n    }\n  });\n\n  parsedBody = improve(parsedBody);\n  parsedBody = remarkable.render(parsedBody);\n\n  const htmlReadyOptions = {\n    mutate: true,\n    resolveIframe: returnType === \"text\"\n  };\n  parsedBody = htmlReady(parsedBody, htmlReadyOptions).html;\n  parsedBody = parsedBody.replace(dtubeImageRegex, \"\");\n\n  if (options.rewriteLinks) {\n    parsedBody = parsedBody.replace(\n      rewriteRegex,\n      (match, p1) => `\"${p1 || \"/\"}\"`\n    );\n  }\n\n  parsedBody = sanitizeHtml(\n    parsedBody,\n    sanitizeConfig({\n      secureLinks: options.secureLinks\n    })\n  );\n  if (returnType === \"text\") {\n    return parsedBody;\n  }\n\n  const sections = [];\n\n  const splittedBody = parsedBody.split(\"~~~ embed:\");\n  for (let i = 0; i < splittedBody.length; i += 1) {\n    let section = splittedBody[i];\n\n    const match = section.match(/^([A-Za-z0-9_-]+) ([A-Za-z]+) (\\S+) ~~~/);\n    if (match && match.length >= 4) {\n      const id = match[1];\n      const type = match[2];\n      const link = match[3];\n      const embed = getEmbed(link);\n      sections.push(\n        ReactDOMServer.renderToString(\n          <PostFeedEmbed key={`embed-a-${i}`} inPost embed={embed} />\n        )\n      );\n      section = section.substring(`${id} ${type} ${link} ~~~`.length);\n    }\n    if (section !== \"\") {\n      sections.push(section);\n    }\n  }\n  // eslint-disable-next-line react/no-danger\n  return <div dangerouslySetInnerHTML={{ __html: sections.join(\"\") }} />;\n}\n\nconst Body = props => {\n  const options = {\n    rewriteLinks: props.rewriteLinks,\n    secureLinks: props.exitPageSetting\n  };\n  const htmlSections = getHtml(\n    props.body,\n    props.jsonMetadata,\n    \"Object\",\n    options\n  );\n  return (\n    <div className={classNames(\"Body\", { \"Body--full\": props.full })}>\n      {htmlSections}\n    </div>\n  );\n};\n\nBody.propTypes = {\n  body: PropTypes.string,\n  jsonMetadata: PropTypes.string,\n  full: PropTypes.bool,\n  rewriteLinks: PropTypes.bool,\n  exitPageSetting: PropTypes.bool\n};\n\nBody.defaultProps = {\n  body: \"\",\n  jsonMetadata: \"\",\n  full: false,\n  rewriteLinks: false,\n  exitPageSetting: true\n};\n\nexport default Body;\n","/**\n * This function is extracted from steemit.com source code and does the same tasks with some slight-\n * adjustments to meet our needs. Refer to the main one in case of future problems:\n * https://github.com/steemit/steemit.com/blob/06c90aa8260f09c4ae061e652d884f68b8a6a409/app/utils/ChainValidation.js\n */\n\nexport function validateAccountName(value) {\n  let label;\n  let suffix;\n\n  suffix = \"Account name should \";\n  if (!value) {\n    return `${suffix}not be empty.`;\n  }\n  const length = value.length;\n  if (length < 3) {\n    return `${suffix}be longer.`;\n  }\n  if (length > 16) {\n    return `${suffix}be shorter.`;\n  }\n  if (/\\./.test(value)) {\n    suffix = \"Each account segment should \";\n  }\n  const ref = value.split(\".\");\n  for (let i = 0, len = ref.length; i < len; i += 1) {\n    label = ref[i];\n    if (!/^[a-z]/.test(label)) {\n      return `${suffix}start with a letter.`;\n    }\n    if (!/^[a-z0-9-]*$/.test(label)) {\n      return `${suffix}have only letters, digits, or dashes.`;\n    }\n    if (/--/.test(label)) {\n      return `${suffix}have only one dash in a row.`;\n    }\n    if (!/[a-z0-9]$/.test(label)) {\n      return `${suffix}end with a letter or digit.`;\n    }\n    if (!(label.length >= 3)) {\n      return `${suffix}be longer`;\n    }\n  }\n  return null;\n}\n\nexport default null;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class PostFeedEmbed extends React.Component {\n  static propTypes = {\n    embed: PropTypes.shape({\n      provider_name: PropTypes.string,\n      thumbnail: PropTypes.string,\n      embed: PropTypes.string\n    }).isRequired,\n    inPost: PropTypes.bool\n  };\n\n  static defaultProps = {\n    inPost: false\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showIframe: false\n    };\n  }\n\n  handleThumbClick = e => {\n    e.preventDefault();\n    this.setState({ showIframe: true });\n  };\n\n  renderWithIframe = embed => (\n    // eslint-disable-next-line react/no-danger\n    <div\n      className=\"PostFeedEmbed__container\"\n      dangerouslySetInnerHTML={{ __html: embed }}\n    />\n  );\n\n  renderThumbFirst(thumb) {\n    return (\n      <div\n        role=\"presentation\"\n        className=\"PostFeedEmbed\"\n        onClick={this.handleThumbClick}\n      >\n        <div className=\"PostFeedEmbed__playButton\">\n          <i className=\"iconfont icon-group icon-playon_fill\" />\n        </div>\n        <img alt=\"thumbnail\" className=\"PostFeedEmbed__preview\" src={thumb} />\n      </div>\n    );\n  }\n\n  render() {\n    const { embed, inPost } = this.props;\n    const shouldRenderThumb = inPost ? false : !this.state.showIframe;\n\n    if (\n      (embed.provider_name === \"YouTube\" || embed.provider_name === \"DTube\") &&\n      shouldRenderThumb\n    ) {\n      return this.renderThumbFirst(embed.thumbnail);\n    } else if (embed.embed) {\n      return this.renderWithIframe(embed.embed);\n    }\n    return <div />;\n  }\n}\n","import sanitizeHtml from \"sanitize-html\";\nimport URL from \"url-parse\";\nimport { ownUrl } from \"./regexHelpers\";\nimport { knownDomains } from \"./constants\";\n\n/**\nThis function is extracted from steemit.com source code and does the same tasks with some slight-\n * adjustments to meet our needs. Refer to the main one in case of future problems:\n * https://raw.githubusercontent.com/steemit/steemit.com/354c08a10cf88e0828a70dbf7ed9082698aea20d/app/utils/SanitizeConfig.js\n *\n */\nconst iframeWhitelist = [\n  {\n    re: /^(https?:)?\\/\\/player.vimeo.com\\/video\\/.*/i,\n    fn: src => {\n      // <iframe src=\"https://player.vimeo.com/video/179213493\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n      if (!src) return null;\n      const m = src.match(/https:\\/\\/player\\.vimeo\\.com\\/video\\/([0-9]+)/);\n      if (!m || m.length !== 2) return null;\n      return `https://player.vimeo.com/video/${m[1]}`;\n    }\n  },\n  {\n    re: /^(https?:)?\\/\\/www.youtube.com\\/embed\\/.*/i,\n    fn: src => src.replace(/\\?.+$/, \"\") // strip query string (yt: autoplay=1,controls=0,showinfo=0, etc)\n  },\n  {\n    re: /^(https?:)?\\/\\/w.soundcloud.com\\/player\\/.*/i,\n    fn: src => {\n      if (!src) return null;\n      // <iframe width=\"100%\" height=\"450\" scrolling=\"no\" frameborder=\"no\" src=\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/257659076&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true\"></iframe>\n      const m = src.match(/url=(.+?)[&?]/);\n      if (!m || m.length !== 2) return null;\n      return (\n        `https://w.soundcloud.com/player/?url=${\n          m[1]\n        }&auto_play=false&hide_related=false&show_comments=true` +\n        \"&show_user=true&show_reposts=false&visual=true\"\n      );\n    }\n  },\n  {\n    re: /^(https?:)?\\/\\/(?:www\\.)?(?:periscope.tv\\/)(.*)?$/i,\n    fn: src => src // handled by embedjs\n  },\n  {\n    re: /^(https?:)?\\/\\/(?:www\\.)?(?:(player.)?twitch.tv\\/)(.*)?$/i,\n    fn: src => src // handled by embedjs\n  },\n  {\n    re: /^(https?:)?\\/\\/(?:www\\.)?(?:bitchute\\.com\\/)(.*)?$/i,\n    fn: src => src // handled by embedjs\n  }\n];\nexport const noImageText = \"(Image not shown due to low ratings)\";\nexport const allowedTags = `\n    div, iframe, del,\n    a, p, b, q, br, ul, li, ol, img, h1, h2, h3, h4, h5, h6, hr,\n    blockquote, pre, code, em, strong, center, table, thead, tbody, tr, th, td,\n    strike, sup, sub, details, summary\n`\n  .trim()\n  .split(/,\\s*/);\n\n// Medium insert plugin uses: div, figure, figcaption, iframe\nexport default ({\n  large = true,\n  noImage = false,\n  sanitizeErrors = [],\n  secureLinks = false\n}) => ({\n  allowedTags,\n  // figure, figcaption,\n\n  // SEE https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  allowedAttributes: {\n    // \"src\" MUST pass a whitelist (below)\n    iframe: [\n      \"src\",\n      \"width\",\n      \"height\",\n      \"frameborder\",\n      \"allowfullscreen\",\n      \"webkitallowfullscreen\",\n      \"mozallowfullscreen\"\n    ],\n\n    // class attribute is strictly whitelisted (below)\n    div: [\"class\"],\n\n    // style is subject to attack, filtering more below\n    td: [\"style\"],\n    img: [\"src\", \"alt\"],\n    a: [\"href\", \"rel\", \"target\"]\n  },\n  allowedSchemes: sanitizeHtml.defaults.allowedSchemes.concat([\n    \"byteball\",\n    \"bitcoin\"\n  ]),\n  transformTags: {\n    iframe: (tagName, attribs) => {\n      const srcAtty = decodeURIComponent(attribs.src);\n      for (const item of iframeWhitelist) {\n        if (item.re.test(srcAtty)) {\n          const src =\n            typeof item.fn === \"function\" ? item.fn(srcAtty, item.re) : srcAtty;\n          if (!src) break;\n          return {\n            tagName: \"iframe\",\n            attribs: {\n              frameborder: \"0\",\n              allowfullscreen: \"allowfullscreen\",\n              webkitallowfullscreen: \"webkitallowfullscreen\", // deprecated but required for vimeo : https://vimeo.com/forums/help/topic:278181\n              mozallowfullscreen: \"mozallowfullscreen\", // deprecated but required for vimeo\n              src,\n              width: large ? \"640\" : \"480\",\n              height: large ? \"360\" : \"270\"\n            }\n          };\n        }\n      }\n      console.log(\n        'Blocked, did not match iframe \"src\" white list urls:',\n        tagName,\n        attribs\n      );\n      sanitizeErrors.push(`Invalid iframe URL: ${srcAtty}`);\n      return { tagName: \"div\", text: `(Unsupported ${srcAtty})` };\n    },\n    img: (tagName, attribs) => {\n      if (noImage) return { tagName: \"div\", text: noImageText };\n      // See https://github.com/punkave/sanitize-html/issues/117\n      let { src, alt } = attribs;\n      if (!/^(https?:)?\\/\\//i.test(src)) {\n        console.log(\n          \"Blocked, image tag src does not appear to be a url\",\n          tagName,\n          attribs\n        );\n        sanitizeErrors.push(\"An image in this post did not save properly.\");\n        return { tagName: \"img\", attribs: { src: \"brokenimg.jpg\" } };\n      }\n\n      // replace http:// with // to force https when needed\n      src = src.replace(/^http:\\/\\//i, \"//\");\n\n      const atts = { src };\n      if (alt && alt !== \"\") atts.alt = alt;\n      return { tagName, attribs: atts };\n    },\n    div: (tagName, attribs) => {\n      const attys = {};\n      const classWhitelist = [\n        \"pull-right\",\n        \"pull-left\",\n        \"text-justify\",\n        \"text-rtl\",\n        \"text-center\",\n        \"text-right\",\n        \"videoWrapper\"\n      ];\n      const validClass = classWhitelist.find(e => attribs.class === e);\n      if (validClass) {\n        attys.class = validClass;\n      }\n      return {\n        tagName,\n        attribs: attys\n      };\n    },\n    td: (tagName, attribs) => {\n      const attys = {};\n      if (attribs.style === \"text-align:right\") {\n        attys.style = \"text-align:right\";\n      }\n      return {\n        tagName,\n        attribs: attys\n      };\n    },\n    a: (tagName, attribs) => {\n      let { href } = attribs;\n      if (!href) href = \"#\";\n      href = href.trim();\n      const attys = {};\n\n      const url = new URL(href);\n      const hostname = url.hostname || \"localhost\";\n\n      if ([\"https\", \"http\"].indexOf(url.protocol) || !hostname.match(ownUrl)) {\n        attys.target = \"_blank\";\n      }\n\n      if (secureLinks && knownDomains.indexOf(hostname) === -1) {\n        href = `/exit?url=${encodeURIComponent(href)}`;\n      }\n\n      attys.href = href;\n\n      return {\n        tagName,\n        attribs: attys\n      };\n    }\n  }\n});\n","export const knownDomains = [\n  \"localhost\",\n  \"travelfeed.io\",\n  \"busy.org\",\n  \"steempeak.com\",\n  \"steemit.com\",\n  \"d.tube\",\n  \"youtube.com\"\n];\n","export function jsonParse(input) {\n  try {\n    return JSON.parse(input);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport const epochToUTC = epochTimestamp =>\n  new Date(0).setUTCSeconds(epochTimestamp);\n","const latexRegex = /\\[\\+\\]((\\n|.)*?)\\[\\+\\]/g;\n\nexport default function improve(body) {\n  return body.replace(\n    latexRegex,\n    (match, p1) =>\n      `![${p1}](https://latex.codecogs.com/gif.latex?${encodeURI(p1)})`\n  );\n}\n","export const imageRegex = /https?:\\/\\/(?:[-a-zA-Z0-9._]*[-a-zA-Z0-9])(?::\\d{2,5})?(?:[/?#](?:[^\\s\"'<>\\][()]*[^\\s\"'<>\\][().,])?(?:(?:\\.(?:tiff?|jpe?g|gif|png|svg|ico)|ipfs\\/[a-z\\d]{40,})))/gi;\n\nexport const dtubeImageRegex = /<a href=\"https:\\/\\/d.tube.#!\\/v\\/[^/\"]+\\/[^/\"]+\"><img src=\"[^\"]+\"\\/><\\/a>/g;\n\nexport const usernameURLRegex = /@([^/]+)/;\n\nexport const categoryRegex = /\\/([^/]+)/;\n\nexport const rewriteRegex = /\"https?:\\/\\/(?:www)?steemit\\.com(\\/((([\\w-]+\\/)?@[\\w.-]+\\/[\\w-]+)|(@[\\w.-]+(\\/(comments|followers|followed|reblogs|transfers|activity))?)|((trending|created|active|hot|promoted)(\\/[\\w-]+)?))?)?\"/g;\n\nexport const ownUrl = /^(localhost|busy\\.org|staging\\.busy\\.org|busy-master-pr-\\d+\\.herokuapp.com)$/;\n\nexport default null;\n","/**\n * This function is extracted from steemit.com source code and does the same tasks with some slight-\n * adjustments to meet our needs(Removed Embed and ipfs related code). Refer to the main one in case of future problems:\n * https://github.com/steemit/steemit.com/blob/2c2b89a6745aebec1fa45453f31362d700f1bfb7/shared/HtmlReady.js\n */\n\nimport embedjs from \"embedjs\";\nimport slice from \"lodash/slice\";\nimport xmldom from \"xmldom\";\nimport linksRe from \"./steemitLinks\";\nimport { validateAccountName } from \"./ChainValidation\";\nconst getProxyImageURL = \"https://steemitimages.com/1200x0/\";\n\nconst noop = () => {};\nconst DOMParser = new xmldom.DOMParser({\n  errorHandler: { warning: noop, error: noop }\n});\nconst XMLSerializer = new xmldom.XMLSerializer();\n\n/**\n * Functions performed by HTMLReady\n *\n * State reporting\n *  - hashtags: collect all #tags in content\n *  - usertags: collect all @mentions in content\n *  - htmltags: collect all html <tags> used (for validation)\n *  - images: collect all image URLs in content\n *  - links: collect all href URLs in content\n *\n * Mutations\n *  - link()\n *    - ensure all <a> href's begin with a protocol. prepend https:// otherwise.\n *  - iframe()\n *    - wrap all <iframe>s in <div class=\"videoWrapper\"> for responsive sizing\n *  - img()\n *    - convert any <img> src IPFS prefixes to standard URL\n *    - change relative protocol to https://\n *  - linkifyNode()\n *    - scans text content to be turned into rich content\n *    - embedYouTubeNode()\n *      - identify plain youtube URLs and prep them for \"rich embed\"\n *    - linkify()\n *      - scan text for:\n *        - #tags, convert to <a> links\n *        - @mentions, convert to <a> links\n *        - naked URLs\n *          - if img URL, normalize URL and convert to <img> tag\n *          - otherwise, normalize URL and convert to <a> link\n *  - proxifyImages()\n *    - prepend proxy URL to any non-local <img> src's\n *\n * We could implement 2 levels of HTML mutation for maximum reuse:\n *  1. Normalization of HTML - non-proprietary, pre-rendering cleanup/normalization\n *    - (state reporting done at this level)\n *    - normalize URL protocols\n *    - convert naked URLs to images/links\n *    - convert embeddable URLs to <iframe>s\n *    - basic sanitization?\n *  2. Steemit.com Rendering - add in proprietary Steemit.com functions/links\n *    - convert <iframe>s to custom objects\n *    - linkify #tags and @mentions\n *    - proxify images\n *\n * TODO:\n *  - change url to normalizeUrl(url)\n *    - rewrite IPFS prefixes to valid URLs\n *    - schema normalization\n *    - gracefully handle protocols like ftp, mailto\n */\n\n/** Split the HTML on top-level elements. This allows react to compare separately, preventing excessive re-rendering.\n * Used in MarkdownViewer.jsx\n */\n// export function sectionHtml (html) {\n//   const doc = DOMParser.parseFromString(html, 'text/html')\n//   const sections = Array(...doc.childNodes).map(child => XMLSerializer.serializeToString(child))\n//   return sections\n// }\n\n/** Embed videos, link mentions and hashtags, etc...\n */\nexport default function(html, { mutate = true, resolveIframe } = {}) {\n  const state = { mutate, resolveIframe };\n  state.hashtags = new Set();\n  state.usertags = new Set();\n  state.htmltags = new Set();\n  state.images = new Set();\n  state.links = new Set();\n  try {\n    const doc = DOMParser.parseFromString(html, \"text/html\");\n    traverse(doc, state);\n    if (mutate) proxifyImages(doc);\n    // console.log('state', state)\n    if (!mutate) return state;\n    return { html: doc ? XMLSerializer.serializeToString(doc) : \"\", ...state };\n  } catch (error) {\n    // Not Used, parseFromString might throw an error in the future\n    console.error(error.toString());\n    return { html };\n  }\n}\n\nfunction traverse(node, state, depth = 0) {\n  if (!node || !node.childNodes) return;\n  Array(...node.childNodes).forEach(child => {\n    // console.log(depth, 'child.tag,data', child.tagName, child.data)\n    const tag = child.tagName ? child.tagName.toLowerCase() : null;\n    if (tag) state.htmltags.add(tag);\n\n    if (tag === \"img\") img(state, child);\n    else if (tag === \"iframe\") iframe(state, child);\n    else if (tag === \"a\") link(state, child);\n    else if (child.nodeName === \"#text\") linkifyNode(child, state);\n\n    traverse(child, state, depth + 1);\n  });\n}\n\nfunction link(state, child) {\n  const url = child.getAttribute(\"href\");\n  if (url) {\n    state.links.add(url);\n    if (state.mutate) {\n      // If this link is not relative, http, or https -- add https.\n      if (!/^[\\w.-]+:(\\/\\/)?/.test(url)) {\n        child.setAttribute(\"href\", `https://${url}`);\n      }\n    }\n  }\n}\n\n// wrap iframes in div.videoWrapper to control size/aspect ratio\nfunction iframe(state, child) {\n  const url = child.getAttribute(\"src\");\n  let domString;\n  const embed = embedjs.get(url || \"\", { width: \"100%\", height: 400 });\n  if (embed && embed.id) {\n    const { images, links } = state;\n    links.add(embed.url);\n    images.add(`https://img.youtube.com/vi/${embed.id}/0.jpg`);\n    if (!resolveIframe)\n      domString = `~~~ embed:${embed.id} ${embed.provider_name} ${\n        embed.url\n      } ~~~`;\n  }\n\n  const { mutate, resolveIframe } = state;\n  if (!mutate) return;\n\n  const tag = child.parentNode.tagName\n    ? child.parentNode.tagName.toLowerCase()\n    : child.parentNode.tagName;\n  if (\n    tag === \"div\" &&\n    child.parentNode.getAttribute(\"class\") === \"videoWrapper\"\n  )\n    return;\n  const html = XMLSerializer.serializeToString(child);\n  if (resolveIframe) domString = `<div class=\"videoWrapper\">${html}</div>`;\n  child.parentNode.replaceChild(DOMParser.parseFromString(domString), child);\n}\n\nfunction img(state, child) {\n  const url = child.getAttribute(\"src\");\n  if (url) {\n    state.images.add(url);\n    if (state.mutate) {\n      let url2 = url;\n      if (/^\\/\\//.test(url2)) {\n        // Change relative protocol imgs to https\n        url2 = `https:${url2}`;\n      }\n      if (url2 !== url) {\n        child.setAttribute(\"src\", url2);\n      }\n    }\n  }\n}\n\n// For all img elements with non-local URLs, prepend the proxy URL (e.g. `https://img0.steemit.com/0x0/`)\nfunction proxifyImages(doc) {\n  if (!doc) return;\n  [...doc.getElementsByTagName(\"img\")].forEach(node => {\n    const url = node.getAttribute(\"src\");\n    if (!linksRe.local.test(url)) {\n      node.setAttribute(\"src\", { getProxyImageURL });\n    }\n  });\n}\n\nfunction linkifyNode(child, state) {\n  try {\n    const tag = child.parentNode.tagName\n      ? child.parentNode.tagName.toLowerCase()\n      : child.parentNode.tagName;\n    if (tag === \"code\") return;\n    if (tag === \"a\") return;\n\n    const { mutate } = state;\n    if (!child.data) return;\n\n    if (isEmbedable(child, state.links, state.images, state.resolveIframe))\n      return;\n\n    const data = XMLSerializer.serializeToString(child);\n    const content = linkify(\n      data,\n      state.mutate,\n      state.hashtags,\n      state.usertags,\n      state.images,\n      state.links\n    );\n    if (mutate && content !== data) {\n      const newChild = DOMParser.parseFromString(`<span>${content}</span>`);\n      child.parentNode.replaceChild(newChild, child);\n      return newChild;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction linkify(content, mutate, hashtags, usertags, images, links) {\n  // hashtag\n  content = content.replace(/(^|\\s)(#[-a-z\\d]+)/gi, tag => {\n    if (/#[\\d]+$/.test(tag)) return tag; // Don't allow numbers to be tags\n    const space = /^\\s/.test(tag) ? tag[0] : \"\";\n    const tag2 = tag.trim().substring(1);\n    const tagLower = tag2.toLowerCase();\n    if (hashtags) hashtags.add(tagLower);\n    if (!mutate) return tag;\n    return `${space}<a href=\"/trending/${tagLower}\">${tag}</a>`;\n  });\n\n  // usertag (mention)\n  // Cribbed from https://github.com/twitter/twitter-text/blob/v1.14.7/js/twitter-text.js#L90\n  // https://github.com/steemit/condenser/blob/7c588536d2568a554391ea1edaa656c636c5a890/src/shared/HtmlReady.js#L272-L290\n  content = content.replace(\n    /(^|[^a-zA-Z0-9_!#$%&*@＠\\/]|(^|[^a-zA-Z0-9_+~.-\\/#]))[@＠]([a-z][-\\.a-z\\d]+[a-z\\d])/gi,\n    (match, preceeding1, preceeding2, user) => {\n      const userLower = user.toLowerCase();\n      const valid = validateAccountName(userLower) == null;\n\n      if (valid && usertags) usertags.add(userLower);\n\n      const preceedings = (preceeding1 || \"\") + (preceeding2 || \"\"); // include the preceeding matches if they exist\n\n      if (!mutate) return `${preceedings}${user}`;\n\n      return valid\n        ? `${preceedings}<a href=\"/@${userLower}\">@${user}</a>`\n        : `${preceedings}@${user}`;\n    }\n  );\n\n  content = content.replace(linksRe.any, ln => {\n    if (linksRe.image.test(ln)) {\n      if (images) images.add(ln);\n      return `<img src=\"${ln}\" />`;\n    }\n\n    // do not linkify .exe or .zip urls\n    if (/\\.(zip|exe)$/i.test(ln)) return ln;\n\n    if (links) links.add(ln);\n    return `<a href=\"${ln}\">${ln}</a>`;\n  });\n  return content;\n}\n\nfunction isEmbedable(child, links, images, resolveIframe) {\n  try {\n    if (!child.data) return false;\n    const data = child.data;\n    const foundLinks = data.match(linksRe.any);\n    if (!foundLinks) return false;\n    const embed = embedjs.get(foundLinks[0] || \"\", {\n      width: \"100%\",\n      height: 400\n    });\n    if (embed && embed.id) {\n      const domString = resolveIframe\n        ? embed.embed\n        : `${slice(data, 0, foundLinks.index)}~~~ embed:${embed.id} ${\n            embed.provider_name\n          } ${embed.url} ~~~${slice(\n            data,\n            foundLinks.index + foundLinks[0].length,\n            data.length\n          )}`;\n      const v = DOMParser.parseFromString(domString);\n      child.parentNode.replaceChild(v, child);\n      // console.trace('embed.embed', v);\n      if (links) links.add(embed.url);\n      if (images) images.add(`https://img.youtube.com/vi/${embed.id}/0.jpg`);\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n}\n\n/** @return {id, url} or <b>null</b> */\nfunction youTubeId(data) {\n  if (!data) return null;\n\n  const m1 = data.match(linksRe.youTube);\n  const url = m1 ? m1[0] : null;\n  if (!url) return null;\n\n  const m2 = url.match(linksRe.youTubeId);\n  const id = m2 && m2.length >= 2 ? m2[1] : null;\n  if (!id) return null;\n\n  return { id, url };\n}\n","/**\n * This function is extracted from steemit.com source code and does the same tasks with some slight-\n * adjustments to meet our needs. Refer to the main one in case of future problems:\n * https://github.com/steemit/steemit.com/blob/4d4fe1f7da37d3dbb35bd0a131d9e5b44bad316d/app/utils/Links.js\n */\n\nconst urlChar = '[^\\\\s\"<>\\\\]\\\\[\\\\(\\\\)]';\nconst urlCharEnd = urlChar.replace(/\\]$/, \".,']\"); // insert bad chars to end on\nconst imagePath =\n  \"(?:(?:\\\\.(?:tiff?|jpe?g|gif|png|svg|ico)|ipfs/[a-z\\\\d]{40,}))\";\nconst domainPath = \"(?:[-a-zA-Z0-9\\\\._]*[-a-zA-Z0-9])\";\nconst urlChars = `(?:${urlChar}*${urlCharEnd})?`;\n\nconst urlSet = ({ domain = domainPath, path } = {}) =>\n  // urlChars is everything but html or markdown stop chars\n  `https?:\\/\\/${domain}(?::\\\\d{2,5})?(?:[/\\\\?#]${urlChars}${path ? path : \"\"})${\n    path ? \"\" : \"?\"\n  }`;\n\n/**\n    Unless your using a 'g' (glob) flag you can store and re-use your regular expression.  Use the cache below.  If your using a glob (for example: replace all), the regex object becomes stateful and continues where it left off when called with the same string so naturally the regexp object can't be cached for long.\n*/\nexport const any = (flags = \"i\") => new RegExp(urlSet(), flags);\nexport const local = (flags = \"i\") =>\n  new RegExp(\n    urlSet({\n      domain: \"(?:localhost|(?:.*\\\\.)?steemit.com|(?:.*\\\\.)?busy.org)\"\n    }),\n    flags\n  );\nexport const remote = (flags = \"i\") =>\n  new RegExp(\n    urlSet({\n      domain: `(?!localhost|(?:.*\\\\.)?steemit.com|(?:.*\\\\.)?busy.org)${domainPath}`\n    }),\n    flags\n  );\nexport const youTube = (flags = \"i\") =>\n  new RegExp(urlSet({ domain: \"(?:(?:.*.)?youtube.com|youtu.be)\" }), flags);\nexport const image = (flags = \"i\") =>\n  new RegExp(urlSet({ path: imagePath }), flags);\nexport const imageFile = (flags = \"i\") => new RegExp(imagePath, flags);\n// export const nonImage = (flags = 'i') => new RegExp(urlSet({path: '!' + imageFile}), flags)\n// export const markDownImageRegExp = (flags = 'i') => new RegExp('\\!\\[[\\w\\s]*\\]\\(([^\\)]+)\\)', flags);\n\nexport default {\n  any: any(),\n  local: local(),\n  remote: remote(),\n  image: image(),\n  imageFile: imageFile(),\n  youTube: youTube(),\n  youTubeId: /(?:(?:youtube.com\\/watch\\?v=)|(?:youtu.be\\/)|(?:youtube.com\\/embed\\/))([A-Za-z0-9\\_\\-]+)/i,\n  vimeoId: /(?:vimeo.com\\/|player.vimeo.com\\/video\\/)([0-9]+)/,\n  // simpleLink: new RegExp(`<a href=\"(.*)\">(.*)<\\/a>`, 'ig'),\n  ipfsPrefix: /(https?:\\/\\/.*)?\\/ipfs/i\n};\n\n// Original regex\n// const urlRegex = '^(?!mailto:)(?:(?:http|https|ftp)://)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$';\n\n// About performance\n// Using exec on the same regex object requires a new regex to be created and compile for each text (ex: post).  Instead replace can be used `body.replace(remoteRe, l => {` discarding the result for better performance`}).  Re-compiling is a chrome bottleneck but did not effect nodejs.\n","// Returns a Date object if the input is a valid datetime string in JSON format (if not:returns input)\n\nconst dateFormat = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/;\nconst reviver = (key, value) => {\n  if (typeof value === \"string\" && dateFormat.test(value)) {\n    return new Date(value);\n  }\n  return value;\n};\n\nexport default reviver;\n","//Gets the image from the json_metadata if they are defined, if not it crawls the body for an image, if none is found it returns a placeholder\n\nconst getImage = (json_metadata, body, size) => {\n  const json = JSON.parse(json_metadata);\n  let image = \"\";\n  if (\n    typeof json.image != \"undefined\" &&\n    json.image.length > 0 &&\n    json.image[0] !== \"\"\n  ) {\n    image = `https://steemitimages.com/${size}/` + json.image[0];\n  } else {\n    const imatch = body.match(\n      /(?:(?<=(?:src=\"|src='))|(?:(?<=(?:\\(|>))))((?:https|http)?:\\/\\/.*\\.(?:png|jpg|gif|jpeg))(?:(?=[\"|)|<]))/i\n    );\n    if (imatch !== null) {\n      image = `https://steemitimages.com/${size}/` + imatch[0];\n    } else {\n      image = `https://steemitimages.com/${size}/https://cdn.steemitimages.com/DQmPmEJ5NudyR5Vhh5X36U1qY8FgM5iuaN1Smc5N55cr363/default-header.png`;\n    }\n  }\n  return image;\n};\n\nexport default getImage;\n","var author_blacklist = [\n  \"partiko\",\n  \"steem-ua\",\n  \"ocdb\",\n  \"steemitboard\",\n  \"drotto\",\n  \"treeplanter\",\n  \"coolbot\",\n  \"microbot\",\n  \"cabbage-dealer\",\n  \"entrust\",\n  \"sharkbank\",\n  \"sleepagent\",\n  \"kakibukit\",\n  \"ssg-community\",\n  \"esteemapp\",\n  \"steem-plus\",\n  \"minnowsupport\",\n  \"snackplus\",\n  \"pixresteemer\"\n];\nvar permlink_blacklist = [];\n\nconst isBlacklisted = (author, permlink) => {\n  if (\n    author_blacklist.indexOf(author) > -1 === true ||\n    permlink_blacklist.indexOf(permlink) > -1 === true\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport default isBlacklisted;\n","import React, { Fragment, Component } from \"react\";\nimport \"@babel/polyfill\";\nimport PropTypes from \"prop-types\";\nimport { Client } from \"dsteem\";\nimport FrontPageHeader from \"../components/FrontPageHeader\";\nimport BlogGridList from \"../components/BlogGridList\";\nimport PostGrid from \"../components/PostGrid\";\nimport Helmet from \"react-helmet\";\n\nconst client = new Client(\"https://api.steemit.com\");\n\nclass Index extends Component {\n  static async getInitialProps() {\n    const args = { tag: \"travelfeed\", limit: 24 };\n    const stream = await client.database.getDiscussions(\"blog\", args);\n    return { stream };\n  }\n  render() {\n    const description =\n      \"Find inspiration for your travels on TravelFeed. Join the TravelFeed community, write your own travel blog and start earning!\";\n    return (\n      <Fragment>\n        <Helmet>\n          <title>{\"TravelFeed: The Travel Community\"}</title>\n          <meta property=\"description\" content={description} />\n          <meta property=\"og:description\" content={description} />\n        </Helmet>\n        <div>\n          <FrontPageHeader />\n        </div>\n        <div>\n          <BlogGridList stream={this.props.stream} />\n        </div>\n        <div id=\"discover\" />\n        <PostGrid\n          stream={this.props.stream}\n          type=\"curationfeed\"\n          filter=\"travelfeed\"\n        />\n      </Fragment>\n    );\n  }\n}\n\nIndex.propTypes = {\n  stream: PropTypes.array\n};\n\nexport default Index;\n","module.exports = require(\"@babel/polyfill\");","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@material-ui/core/Avatar\");","module.exports = require(\"@material-ui/core/Button\");","module.exports = require(\"@material-ui/core/Card\");","module.exports = require(\"@material-ui/core/CardActionArea\");","module.exports = require(\"@material-ui/core/CardActions\");","module.exports = require(\"@material-ui/core/CardContent\");","module.exports = require(\"@material-ui/core/CardHeader\");","module.exports = require(\"@material-ui/core/CardMedia\");","module.exports = require(\"@material-ui/core/CircularProgress\");","module.exports = require(\"@material-ui/core/Grid\");","module.exports = require(\"@material-ui/core/GridList\");","module.exports = require(\"@material-ui/core/GridListTile\");","module.exports = require(\"@material-ui/core/GridListTileBar\");","module.exports = require(\"@material-ui/core/IconButton\");","module.exports = require(\"@material-ui/core/Typography\");","module.exports = require(\"@material-ui/icons/FlightTakeoff\");","module.exports = require(\"@material-ui/icons/Star\");","module.exports = require(\"classnames\");","module.exports = require(\"dsteem\");","module.exports = require(\"embedjs\");","module.exports = require(\"lodash\");","module.exports = require(\"lodash/slice\");","module.exports = require(\"next/link\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-dom/server\");","module.exports = require(\"react-helmet\");","module.exports = require(\"reading-time\");","module.exports = require(\"remarkable\");","module.exports = require(\"sanitize-html\");","module.exports = require(\"styled-jsx/style\");","module.exports = require(\"url-parse\");","module.exports = require(\"xmldom\");"],"mappingsxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;;;;;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AAGA;AALA;AASA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAYA;AACA;AACA;AADA;AAIA;AAEA;AAAA;AARA;AAgBA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAQA;AACA;AADA;AAGA;AAJA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAcA;AACA;AACA;AADA;AAIA;AAEA;AAAA;AARA;AAmBA;;;;AA7HA;AACA;AA+HA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AAIA;AACA;AACA;AAHA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAOA;AAEA;AAHA;AAAA;AAKA;AAAA;AAEA;AACA;AAFA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAAA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAQA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAAA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAQA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAAA;AAWA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AAAA;AACA;AAAA;AAAA;AAUA;AACA;AACA;AAJA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAJA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAlJA;AAAA;AAAA;AAgPA;;;;AAnPA;AACA;AAqPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;;;;;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AAUA;AAAA;AAAA;AAAA;AAXA;AAAA;AACA;AADA;AAYA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA3BA;AA4BA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAxDA;AAAA;AACA;AADA;AAwDA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAiFA;;;;;AACA;;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;;;;;;;AAMA;AACA;AACA;AACA;AACA;AAJA;AACA;;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAIA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AASA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AASA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAYA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAaA;AACA;AAIA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AACA;AAFA;AASA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAGA;AA3BA;AA+BA;AAAA;AAAA;AACA;AACA;AAHA;AAMA;AACA;AAGA;AALA;AAWA;AACA;AACA;AAHA;AAOA;AAAA;AAQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AAHA;AAQA;AACA;AAAA;AAAA;AAFA;AAeA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAUA;;;;AAhbA;AACA;AAibA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;;;;;;;;;AC5dA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAGA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAMA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;;;;;;;;;AC1JA;AAAA;AAAA;;;;;AAMA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;;;;;AAcA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAXA;AAYA;AAEA;AACA;AACA;AAAA;AAAA;AAFA;AAFA;AAAA;AACA;AAXA;AACA;AADA;AAFA;AAKA;AACA;;;AAcA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;AA9DA;AACA;AADA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AANA;AACA;AAFA;AAWA;AADA;AACA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAbA;AAgBA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAUA;AACA;AAEA;AACA;AACA;AACA;AAlBA;AAoBA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAPA;AAFA;AAYA;AACA;AACA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AACA;AAGA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AASA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAxGA;AA7BA;AALA;;;;;;;;;;;;ACjEA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;ACRA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAGA;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AAbA;AAAA;AAeA;AAEA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AALA;AAQA;AAEA;AAGA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;AC9TA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAMA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAMA;;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AADA;AAFA;AAOA;AAAA;AAAA;AAGA;AADA;AAFA;AAOA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAcA;AAEA;AACA;;;;;;;;;;;;AC9DA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACVA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACxBA;AAAA;AAqBA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AAMA;AACA;AAEA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAHA;AAOA;;;;;;;;;;;;AA5BA;AAAA;AAAA;AAAA;;AACA;AACA;;AADA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AALA;AACA;AAgCA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;AChsourceRoot":""}